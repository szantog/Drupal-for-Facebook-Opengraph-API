<?php
/**
 * @file
 *   fbg_api.module
 * Project:Drupal for Facebook
 *
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

define ('FBG_API_BASE_URL', 'https://graph.facebook.com');
define ('FBG_APP_BASE_URL', 'http://top-memes.com');

/**
 * Get data about a facebook object.
 *
 * @param type $args
 *   An array of arguments to be add to graph api url, or string, in which
 *   arguments should be separated by /
 * @param type $params
 *   The query string appen to url.
 * @return type
 *   The fetched data from url, usually an array of objects.
 */
function fbg_api_get_fb_object($args, $params) {
  if (is_array($args)) {
    $args = implode('/', $args);
  }
  $url = url(FBG_API_BASE_URL . '/' . $args, array(
    'external' => TRUE,
    'absolute' => TRUE,
    'https' => TRUE,
    'query' => $params
  ));

  return fbg_api_fetch_object_data($url);
}

/**
 * The facebook api provides data as json format. This function fetch this,
 * check, if data is paged, and walk around all page then return only 1 array
 * @param type $url
 */
function fbg_api_fetch_object_data($url) {
  $return = array();
  $json = drupal_http_request($url);
  if ($json->code == 200) {
    $fetched = json_decode($json->data);
    foreach ($fetched as $data) {
      if (!empty($data->data)) {
        $return +=  $data->data;
      }
      if (isset($data->paging->next)) {
        fbg_api_fetch_object_data($data->paging->next);
      }
    }
  }
  dsm(get_defined_vars());
  return $return;
}

function fbg_api_cache_set($cid, $data) {
  return cache_set($cid, $data, 'fbg_api');
}

/**
 * Get all facebook comment for a node, and save it into the drupal's comment
 * system.
 *
 * @param $node
 */
function fbg_api_get_node_comments($node) {
  $comments = &drupal_static('fbg_comments', array());

  if (drupal_get_path_alias("node/$node->nid")) {
    $url = FBG_APP_BASE_URL . url("node/$node->nid");
  }

  if ($comments = fbg_api_get_fb_object('comments', array('ids' => $url))) {
    $drupal_comments = fbg_api_build_comments($comments);
    fbg_api_save_comments($drupal_comments, $node);
  }
  //dsm(get_defined_vars());
}

/**
 * Append drupal data to facebook comments
 * @param array $comments
 *   An array of facebook comment object
 * @param boolean $rebuild
 *   @todo Not implemented yet,
 * @return array
 *   An array of drupal compatible comment object.
 */
function fbg_api_build_comments($comments, $rebuild = FALSE) {
  drupal_static_reset('_fbg_api_build_comment');
  foreach ($comments as $comment) {
    if (!fbg_api_get_comment_cid_by_fb_cid($comment->id) || $rebuild) {
      _fbg_api_build_comment($comment);
    }
  }
  return drupal_static('_fbg_api_build_comment');
}

/**
 * Helper function to build a facebook comment object. If the comment has
 * child comments, this is called recursive, and the child get the parent
 * comment's id.
 * No return value set, this only build drupal_static('fbg_api_build_comment')
 * array.
 *
 * @param type $comment
 * @param type $parent
 */
function _fbg_api_build_comment($comment, $parent = NULL) {
    $comments = &drupal_static(__FUNCTION__, array());

    // @todo: make this for exisiting comment to rebuild
    $comment->fb_cid = $comment->id;
    $comment->name = $comment->from->name;
    $comment->subject = '';
    $comment->cid = fbg_api_get_comment_cid_by_fb_cid($fb_cid) ? fbg_api_get_comment_cid_by_fb_cid($fb_cid) : 0;
    $comment->pid = 0;
    $comment->comment_body[LANGUAGE_NONE][0]['value'] = $comment->message;
    $comment->comment_body[LANGUAGE_NONE][0]['format'] = 'filtered_html';
    $comment->is_anonymous = TRUE;
    $comment->uid = 0;
    $comment->status = COMMENT_PUBLISHED;
    $comment->date = $comment->created_time;

    unset($comment->likes);
    unset($comment->id);
    unset($comment->from);
    unset($comment->message);
    unset($comment->created_time);

    // This is not the real comment->pid. Need to convert to a valid drupal cid
    // before saving.
    if (!is_null($parent)) {
      $comment->pid = $parent;
    }
    if (isset($comment->comments)) {
      $subcomments = $comment->comments->data;
      foreach ($subcomments as $subcomment) {
        _fbg_api_build_comment($subcomment, $comment->fb_cid);
        unset($comment->comments);
      }
    }

    $comments[] = $comment;
}

/**
 * Save multiple comments fetched by facebook api.
 *
 * @param array $comments
 *   An array of facebook comment object
 * @param object $node
 *   The node object
 */
function fbg_api_save_comments($comments, $node) {
  if (!empty($comments)) {
    $parented = array();
    foreach($comments as $comment) {
        $comment->nid = $node->nid;
        $comment->language = $node->language;
        // Separate all comments, that has parent, to be sure, the parent
        // Comment is saved before save.
        if (($comment->pid != 0)) {
          $parented[] = $comment;
        }
        else {
          comment_submit($comment);
          comment_save($comment);
        }
    }
    foreach ($parented as $comment) {
      $comment->pid = fbg_api_get_comment_cid_by_fb_cid($comment->pid);
      comment_submit($comment);
      comment_save($comment);
    }
  }
}

/**
 * Get a comment cid from comment table based on facebook comment id.
 * @param string $fb_cid
 *   The facebook comment id.
 * @return
 *   The drupal comment id if exists, or FALSE if not.
 */
function fbg_api_get_comment_cid_by_fb_cid($fb_cid) {
  $result = &drupal_static(__FUNCTION__);

  if (!isset($result[$fb_cid])) {
    $result[$fb_cid] = db_query('SELECT * FROM {comment} WHERE fb_cid = :our_cid', array(':our_cid' => $fb_cid))->fetchField();
  }
  return $result[$fb_cid];
}